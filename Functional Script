import tkinter as tk
from tkinter import simpledialog
from time import strftime
import json
import paho.mqtt.client as mqtt
import random
import signal
import string
import time
import threading

KPC_HOST = "mqtt.cloud.kaaiot.com"  # Kaa Cloud plain MQTT host
KPC_PORT = 1883  # Kaa Cloud plain MQTT port

ENDPOINT_TOKEN = ""         # Paste endpoint token
APPLICATION_VERSION = ""    # Paste application version

class DataCollectionClient: 
 
    def __init__(self, client): 
        self.client = client 
        self.data_collection_topic = f'kp1/{APPLICATION_VERSION}/dcx/{ENDPOINT_TOKEN}/json/32' 
 
        command_reboot_topic = f'kp1/{APPLICATION_VERSION}/cex/{ENDPOINT_TOKEN}/command/reboot/status' 
        self.client.message_callback_add(command_reboot_topic, self.handle_reboot_command) 
        self.command_reboot_result_topik = f'kp1/{APPLICATION_VERSION}/cex/{ENDPOINT_TOKEN}/result/reboot' 
 
        command_zero_topic = f'kp1/{APPLICATION_VERSION}/cex/{ENDPOINT_TOKEN}/command/zero/status' 
        self.client.message_callback_add(command_zero_topic, self.handle_zero_command) 
        self.command_zero_result_topik = f'kp1/{APPLICATION_VERSION}/cex/{ENDPOINT_TOKEN}/result/zero' 
 
    def connect_to_server(self): 
        print(f'Connecting to Kaa server at {KPC_HOST}:{KPC_PORT} using application version {APPLICATION_VERSION} and endpoint token {ENDPOINT_TOKEN}') 
        self.client.connect(KPC_HOST, KPC_PORT, 60) 
        print('Successfully connected') 
 
    def disconnect_from_server(self): 
        print(f'Disconnecting from Kaa server at {KPC_HOST}:{KPC_PORT}...') 
        self.client.loop_stop() 
        self.client.disconnect() 
        print('Successfully disconnected') 
 
    def handle_reboot_command(self, client, userdata, message): 
        print(f'<--- Received "reboot" command on topic {message.topic} \nRebooting...') 
        command_result = self.compose_command_result_payload(message) 
        print(f'command result {command_result}') 
        client.publish(topic=self.command_reboot_result_topik, payload=command_result) 
 
    def handle_zero_command(self, client, userdata, message): 
        print(f'<--- Received "zero" command on topic {message.topic} \nSending zero values...') 
        command_result = self.compose_command_result_payload(message) 
        client.publish(topic=self.data_collection_topic, payload=self.compose_data_sample(0, 0, 0)) 
        client.publish(topic=self.command_zero_result_topik, payload=command_result) 
 
    def compose_command_result_payload(self, message): 
        command_payload = json.loads(str(message.payload.decode("utf-8"))) 
        print(f'command payload: {command_payload}') 
        command_result_list = [] 
        for command in command_payload: 
            commandResult = {"id": command['id'], "statusCode": 200, "reasonPhrase": "OK", "payload": "Success"} 
            command_result_list.append(commandResult) 
        return json.dumps( 
            command_result_list 
        ) 
 
    def compose_data_sample(self, fuelLevel, minTemp, maxTemp): 
        return json.dumps([ 
            { 
                'timestamp': int(round(time.time() * 1000)), 
                'fuelLevel': fuelLevel, 
                'temperature': random.randint(minTemp, maxTemp), 
            } 
        ]) 
 
 
def on_message(client, userdata, message): 
    print(f'Message received: topic {message.topic}\nbody {str(message.payload.decode("utf-8"))}')

class Page(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
    def show(self):
        self.lift()  
    
class Page1(Page):                                                       
    def __init__(self, *args, **kwargs):
        Page.__init__(self, *args, **kwargs)
        self.Create_Page1_Widgets()
       
    def Create_Page1_Widgets(self):
        self.BackCan=tk.Canvas(self,width=800,height=440,borderwidth=0,bg="white")
        self.BackCan.place(x=0,y=0) 
        #Entry Boxes#
        self.Page1Var1 = tk.StringVar()
        self.Page1Var2 = tk.StringVar()
        self.Page1e1=tk.Entry(self,width=12,justify="center",textvariable=self.Page1Var1)
        self.Page1e1.place(x=10,y=163,width=102,height=26)  

class Page2(Page):                                             
    def __init__(self, *args, **kwargs):
        Page.__init__(self, *args, **kwargs)
        self.Create_Page2_Widgets()
    
    def Create_Page2_Widgets(self):      
        #Validation#
        #Page Backround#
        self.BackCan=tk.Canvas(self,width=800,height=440,borderwidth=0,bg="white")
        self.BackCan.place(x=0,y=0)
        ##Entry Boxes##
        self.Page2Var1 = tk.StringVar()
        self.Page2Var2 = tk.StringVar()
        self.Page2e1=tk.Entry(self,width=12,justify="center",textvariable=self.Page2Var1)
        self.Page2e1.place(x=10,y=200,width=102,height=26)

class MainView(tk.Frame):
    def __init__(self,  *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.Create_Main_Widgets()
        self.clock()
        
        
        self.listener = SignalListener()
        threading.Thread(target=self.client_task, daemon=True).start()
        
        
    def Create_Main_Widgets(self):    
        #Navigation Frame#
        p2 = Page2(self);p1 = Page1(self)
        Navigation_frame = tk.Frame(self, width=800, height=55, background="bisque")
        container = tk.Frame(self)
        Navigation_frame.pack(side="bottom");Navigation_frame.pack_propagate(0)
        container.pack(side="top", fill="both", expand=True)
        NavCan=tk.Canvas(Navigation_frame,width=800,height=55,borderwidth=0,bg="white")
        NavCan.place(x=0,y=0)
        p1.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p2.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        b1 = tk.Button(Navigation_frame, height=2, width=10, text="1", command=p1.lift)
        b2 = tk.Button(Navigation_frame, height=2, width=10, text="2", command=p2.lift)
        b1.place(x=144, y=6);b2.place(x=253, y=6)
        #Clock Label#
        self.lbl = tk.Label(Navigation_frame,font=("Arial",20,'bold'),background= 'grey',foreground = 'black'); self.lbl.place(x=20, y=12)  
        
    def clock(self): 
        string = strftime('%H:%M:%S')
        self.lbl.config(text = string); self.after(1000, self.clock)
        
    def client_task(self):        
        client = mqtt.Client(client_id=''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6)))

        data_collection_client = DataCollectionClient(client)
        data_collection_client.connect_to_server()

        client.on_message = on_message

        # Start the loop
        client.loop_start()

        fuelLevel, minTemp, maxTemp = 100, 95, 100

        # Send data samples in loop
        while self.listener.keepRunning:
            payload = data_collection_client.compose_data_sample(fuelLevel, minTemp, maxTemp)
            result = data_collection_client.client.publish(topic=data_collection_client.data_collection_topic, payload=payload)
            if result.rc != 0:
                print('Server connection lost, attempting to reconnect')
                data_collection_client.connect_to_server()
            else:
                print(f'--> Sent message on topic "{data_collection_client.data_collection_topic}":\n{payload}')

            time.sleep(3)

            fuelLevel = fuelLevel - 0.3
            if fuelLevel < 1:
                fuelLevel = 100

        data_collection_client.disconnect_from_server()
        
class SignalListener: 
    keepRunning = True 

    def __init__(self): 
        signal.signal(signal.SIGINT, self.stop) 
        signal.signal(signal.SIGTERM, self.stop) 

    def stop(self, signum, frame): 
        print('Shutting down...') 
        self.keepRunning = False
   
if __name__ == "__main__":
    root = tk.Tk()
    main = MainView(root)
    main.pack(side="top", fill="both", expand=True)
    root.wm_geometry("800x440")
    root.attributes('-fullscreen', False)
    root.mainloop()
